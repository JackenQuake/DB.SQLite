1. Создайте представление, которое для каждого курса выводит название, номер последнего потока, дату начала обучения последнего потока и среднюю успеваемость курса по всем потокам.
CREATE VIEW courses_info AS
SELECT
  courses.name AS course_name,
  MAX(streams.number) AS last_stream_number,
  MAX(streams.started_at) AS last_stream_started_at,
  AVG(performance) AS average_performance
  FROM courses
    JOIN streams ON courses.id = streams.course_id
    JOIN grades ON streams.id = grades.stream_id
  GROUP BY courses.id;
   
2. Удалите из базы данных всю информацию, которая относится к преподавателю с идентификатором, равным 3. Используйте транзакцию.
BEGIN TRANSACTION;
  DELETE FROM grades WHERE teacher_id = 3;
  DELETE FROM teachers WHERE id = 3;
COMMIT;

3. Создайте триггер для таблицы успеваемости, который проверяет значение успеваемости на соответствие диапазону чисел от 0 до 5 включительно.
CREATE TRIGGER check_performance_range BEFORE INSERT
ON grades
BEGIN
  SELECT CASE
  WHEN
    NEW.performance NOT BETWEEN 1 AND 5
  THEN
    RAISE(ABORT, 'Wrong performance value, must be between 1 and 5')
  END;
END;

4. Дополнительное задание. Создайте триггер для таблицы потоков, который проверяет, что дата начала потока больше текущей даты, а номер потока имеет наибольшее значение среди существующих номеров. При невыполнении условий необходимо вызвать ошибку с информативным сообщением.
CREATE TRIGGER check_stream_sequence BEFORE INSERT
ON streams
BEGIN
  SELECT CASE
    WHEN
        NEW.started_at <= DATE('now')
      THEN
        RAISE(ABORT, 'Wrong stream start date, must be after current date')
    WHEN
        NEW.number <= (SELECT MAX(number) FROM streams)
      THEN
        RAISE(ABORT, 'Wrong stream number, must be greated than other stream numbers')
  END;
END;
